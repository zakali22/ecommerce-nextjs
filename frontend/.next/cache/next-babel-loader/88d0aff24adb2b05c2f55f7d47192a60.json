{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\zak.ali\\\\Desktop\\\\ReactProjects\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\pages\\\\product\\\\[id].js\";\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nconst PRODUCT_QUERY = gql`\n  query PRODUCT_QUERY($id: ID) {\n    Product(where: { id: $id }) {\n      id\n      name\n      description\n      photo {\n        id\n        altText\n        image {\n          publicUrlTransformed\n        }\n      }\n    }\n  }\n`;\nexport default function SingleProduct({\n  query\n}) {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(PRODUCT_QUERY, {\n    variables: {\n      id: query.id\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 21\n  }, this);\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Product id: \", query.id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n}\nSingleProduct.propTypes = {\n  query: PropTypes.object\n};","map":{"version":3,"sources":["C:/Users/zak.ali/Desktop/ReactProjects/Advanced-React/sick-fits/frontend/pages/product/[id].js"],"names":["PropTypes","useQuery","gql","PRODUCT_QUERY","SingleProduct","query","data","loading","error","variables","id","console","log","propTypes","object"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,aAAa,GAAGD,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;AAiBA,eAAe,SAASE,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAkC;AAC/C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BP,QAAQ,CAACE,aAAD,EAAgB;AACvDM,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEL,KAAK,CAACK;AAAZ;AAD4C,GAAhB,CAAzC;AAIA,MAAIH,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEXG,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,sBAAO;AAAA,+BAAgBD,KAAK,CAACK,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAEDN,aAAa,CAACS,SAAd,GAA0B;AACxBR,EAAAA,KAAK,EAAEL,SAAS,CAACc;AADO,CAA1B","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useQuery } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\n\r\nconst PRODUCT_QUERY = gql`\r\n  query PRODUCT_QUERY($id: ID) {\r\n    Product(where: { id: $id }) {\r\n      id\r\n      name\r\n      description\r\n      photo {\r\n        id\r\n        altText\r\n        image {\r\n          publicUrlTransformed\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function SingleProduct({ query }) {\r\n  const { data, loading, error } = useQuery(PRODUCT_QUERY, {\r\n    variables: { id: query.id },\r\n  });\r\n\r\n  if (loading) return <p>Loading</p>;\r\n  if (error) return <p>Error</p>;\r\n\r\n  console.log(data);\r\n  return <p>Product id: {query.id}</p>;\r\n}\r\n\r\nSingleProduct.propTypes = {\r\n  query: PropTypes.object,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}