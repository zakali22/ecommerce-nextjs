{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/zak.ali/Desktop/ReactProjects/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\zak.ali\\\\Desktop\\\\ReactProjects\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\Products\\\\ProductsListing.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_PRODUCTS_QUERY {\\n    allProducts {\\n      id\\n      name\\n      description\\n      status\\n      price\\n      photo {\\n        id\\n        altText\\n        image {\\n          id\\n          publicUrlTransformed\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Product from './Product';\nimport { ProductListingStyle } from '../styles/ProductListing'; // Defined in Graphql playground\n\nvar ALL_PRODUCTS_QUERY = gql(_templateObject());\nexport default function ProductListing() {\n  _s();\n\n  var _this = this;\n\n  var _useQuery = useQuery(ALL_PRODUCTS_QUERY),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading....\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ProductListingStyle, {\n    children: data.allProducts.map(function (product) {\n      return /*#__PURE__*/_jsxDEV(Product, {\n        product: product\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProductListing, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductListing\");","map":{"version":3,"sources":["C:/Users/zak.ali/Desktop/ReactProjects/Advanced-React/sick-fits/frontend/components/Products/ProductsListing.js"],"names":["useQuery","gql","Product","ProductListingStyle","ALL_PRODUCTS_QUERY","ProductListing","data","error","loading","allProducts","map","product","id"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;;AACA,IAAMC,kBAAkB,GAAGH,GAAH,mBAAxB;AAoBA,eAAe,SAASI,cAAT,GAA0B;AAAA;;AAAA;;AAAA,kBACNL,QAAQ,CAACI,kBAAD,CADF;AAAA,MAC/BE,IAD+B,aAC/BA,IAD+B;AAAA,MACzBC,KADyB,aACzBA,KADyB;AAAA,MAClBC,OADkB,aAClBA,OADkB;;AAGvC,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE,QAAC,mBAAD;AAAA,cACGD,IAAI,CAACG,WAAL,CAAiBC,GAAjB,CAAqB,UAACC,OAAD;AAAA,0BACpB,QAAC,OAAD;AAA0B,QAAA,OAAO,EAAEA;AAAnC,SAAcA,OAAO,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,eADoB;AAAA,KAArB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAbuBP,c;UACWL,Q;;;KADXK,c","sourcesContent":["import { useQuery } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\nimport Product from './Product';\r\nimport { ProductListingStyle } from '../styles/ProductListing';\r\n\r\n// Defined in Graphql playground\r\nconst ALL_PRODUCTS_QUERY = gql`\r\n  query ALL_PRODUCTS_QUERY {\r\n    allProducts {\r\n      id\r\n      name\r\n      description\r\n      status\r\n      price\r\n      photo {\r\n        id\r\n        altText\r\n        image {\r\n          id\r\n          publicUrlTransformed\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function ProductListing() {\r\n  const { data, error, loading } = useQuery(ALL_PRODUCTS_QUERY);\r\n\r\n  if (loading) return <p>Loading....</p>;\r\n  if (error) return <p>Error: {error}</p>;\r\n\r\n  return (\r\n    <ProductListingStyle>\r\n      {data.allProducts.map((product) => (\r\n        <Product key={product.id} product={product} />\r\n      ))}\r\n    </ProductListingStyle>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}