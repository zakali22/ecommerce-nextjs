{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/zak.ali/Desktop/ReactProjects/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query PRODUCT_QUERY($id: ID!) {\\n    Product(where: { id: $id }) {\\n      id\\n      name\\n      description\\n      photo {\\n        id\\n        altText\\n        image {\\n          publicUrlTransformed\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nvar PRODUCT_QUERY = gql(_templateObject());\nvar SingleProductStyle = styled.div.withConfig({\n  displayName: \"SingleProduct__SingleProductStyle\",\n  componentId: \"sc-1edflue-0\"\n})([\"display:flex;img{max-width:500px;height:auto;margin-right:50px;object-fit:contain;}@media (max-width:800px){flex-direction:column;}\"]);\nexport default function SingleProduct(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) return /*#__PURE__*/_jsx(\"p\", {\n    children: \"Loading\"\n  });\n  if (error) return /*#__PURE__*/_jsx(\"p\", {\n    children: \"Error\"\n  });\n  var Product = data.Product;\n  return /*#__PURE__*/_jsxs(SingleProductStyle, {\n    children: [/*#__PURE__*/_jsx(\"img\", {\n      src: Product.photo.image.publicUrlTransformed,\n      alt: Product.photo.altText\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"detail\",\n      children: [/*#__PURE__*/_jsx(\"h2\", {\n        children: Product.name\n      }), /*#__PURE__*/_jsx(\"p\", {\n        children: Product.description\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}