{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\zak.ali\\\\Desktop\\\\ReactProjects\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\Products\\\\ProductsListing.js\";\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Product from './Product';\nconst ALL_PRODUCTS_QUERY = gql`\n  query ALL_PRODUCTS_QUERY {\n    allProducts {\n      id\n      name\n      description\n      status\n      price\n      photo {\n        id\n        altText\n        image {\n          id\n          publicUrlTransformed\n        }\n      }\n    }\n  }\n`;\nexport default function ProductListing() {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(ALL_PRODUCTS_QUERY);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading....\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.allProducts.map(product => /*#__PURE__*/_jsxDEV(Product, {\n      product: product\n    }, product.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/zak.ali/Desktop/ReactProjects/Advanced-React/sick-fits/frontend/components/Products/ProductsListing.js"],"names":["useQuery","gql","Product","ALL_PRODUCTS_QUERY","ProductListing","data","error","loading","allProducts","map","product","id"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,kBAAkB,GAAGF,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBA;AAoBA,eAAe,SAASG,cAAT,GAA0B;AACvC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BP,QAAQ,CAACG,kBAAD,CAAzC;AAEA,MAAII,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE;AAAA,cACGD,IAAI,CAACG,WAAL,CAAiBC,GAAjB,CAAsBC,OAAD,iBACpB,QAAC,OAAD;AAA0B,MAAA,OAAO,EAAEA;AAAnC,OAAcA,OAAO,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD","sourcesContent":["import { useQuery } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\nimport Product from './Product';\r\n\r\nconst ALL_PRODUCTS_QUERY = gql`\r\n  query ALL_PRODUCTS_QUERY {\r\n    allProducts {\r\n      id\r\n      name\r\n      description\r\n      status\r\n      price\r\n      photo {\r\n        id\r\n        altText\r\n        image {\r\n          id\r\n          publicUrlTransformed\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function ProductListing() {\r\n  const { data, error, loading } = useQuery(ALL_PRODUCTS_QUERY);\r\n\r\n  if (loading) return <p>Loading....</p>;\r\n  if (error) return <p>Error: {error}</p>;\r\n\r\n  return (\r\n    <div>\r\n      {data.allProducts.map((product) => (\r\n        <Product key={product.id} product={product} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}