{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nexport default function useForm(initialFormState = {}) {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initialFormState);\n  const inputValues = Object.values(inputs).join(''); // useEffect(() => {\n  //   setInputs(initialFormState);\n  // }, [inputValues]);\n\n  function handleInputChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      [value] = e.target.files;\n      console.log(value);\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function clearForm() {\n    const blankFormState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    setInputs(blankFormState);\n  }\n\n  function resetForm() {\n    setInputs(initialFormState);\n    console.log(inputs);\n  }\n\n  return {\n    inputs,\n    handleInputChange,\n    clearForm,\n    resetForm\n  };\n}","map":{"version":3,"sources":["C:/Users/zak.ali/Desktop/ReactProjects/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useEffect","useState","useForm","initialFormState","inputs","setInputs","inputValues","Object","values","join","handleInputChange","e","value","name","type","target","parseInt","files","console","log","clearForm","blankFormState","fromEntries","entries","map","key","resetForm"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,OAAT,CAAiBC,gBAAgB,GAAG,EAApC,EAAwC;AACrD,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,gBAAD,CAApC;AACA,QAAMG,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcJ,MAAd,EAAsBK,IAAtB,CAA2B,EAA3B,CAApB,CAFqD,CAIrD;AACA;AACA;;AAEA,WAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAC5B,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AAEA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACrBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACD;;AAED,QAAIE,IAAI,KAAK,MAAb,EAAqB;AACnB,OAACF,KAAD,IAAUD,CAAC,CAACI,MAAF,CAASE,KAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACD;;AAEDP,IAAAA,SAAS,iCACJD,MADI;AAEP,OAACS,IAAD,GAAQD;AAFD,OAAT;AAID;;AAED,WAASQ,SAAT,GAAqB;AACnB,UAAMC,cAAc,GAAGd,MAAM,CAACe,WAAP,CACrBf,MAAM,CAACgB,OAAP,CAAenB,MAAf,EAAuBoB,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMb,KAAN,CAAD,KAAkB,CAACa,GAAD,EAAM,EAAN,CAA7C,CADqB,CAAvB;AAIApB,IAAAA,SAAS,CAACgB,cAAD,CAAT;AACD;;AAED,WAASK,SAAT,GAAqB;AACnBrB,IAAAA,SAAS,CAACF,gBAAD,CAAT;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AACD;;AAED,SAAO;AACLA,IAAAA,MADK;AAELM,IAAAA,iBAFK;AAGLU,IAAAA,SAHK;AAILM,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nexport default function useForm(initialFormState = {}) {\r\n  const [inputs, setInputs] = useState(initialFormState);\r\n  const inputValues = Object.values(inputs).join('');\r\n\r\n  // useEffect(() => {\r\n  //   setInputs(initialFormState);\r\n  // }, [inputValues]);\r\n\r\n  function handleInputChange(e) {\r\n    let { value, name, type } = e.target;\r\n\r\n    if (type === 'number') {\r\n      value = parseInt(value);\r\n    }\r\n\r\n    if (type === 'file') {\r\n      [value] = e.target.files;\r\n      console.log(value);\r\n    }\r\n\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  function clearForm() {\r\n    const blankFormState = Object.fromEntries(\r\n      Object.entries(inputs).map(([key, value]) => [key, ''])\r\n    );\r\n\r\n    setInputs(blankFormState);\r\n  }\r\n\r\n  function resetForm() {\r\n    setInputs(initialFormState);\r\n    console.log(inputs);\r\n  }\r\n\r\n  return {\r\n    inputs,\r\n    handleInputChange,\r\n    clearForm,\r\n    resetForm,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}